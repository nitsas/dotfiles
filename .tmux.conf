#
# ---- CHEATSHEET ----
#
# -
# general
# ++ get a tmux command prompt:
# <prefix>:
# ++ list shortcuts
# <prefix>?
# ++ online cheatsheet:
# https://gist.github.com/MohamedAlaa/2961058
#
# -
# reload .tmux.conf
# ++ from bash:
# tmux source-file ~/.tmux.conf
# ++ from inside tmux (in command prompt):
# source-file ~/.tmux.conf
#
# -
# open new window (in tmux)
# <prefix>c
#
# -
# resize panes:
# (using one of the tmux default pane layouts, as is recommended)
# ++ remember: M means the meta key - it's Esc on osx
# ++ next layout (cycle through the defaults)
# <prefix>:next-layout
# ++ vertical split, all panes same width
# <prefix>M1
# ++ horizontal split, all panes same height
# <prefix>M2
# ++ horizontal split, main pane on top, others on bottom, vsplit, same width
# <prefix>M3
# ++ vertical split, main pane left, others right, split, same height
# <prefix>M4
# ++ tile, new panes on bottom, same height before same width
# <prefix>M5
#
# -
# resize pane to full (and back)
# ++ default:
# <prefix>z
# ++ my (vi-like) bindings:
# <prefix>|
# <prefix>_
#
# -
# turn tmux mouse support on and off (to use the mouse as in any other app)
# (my bindings)
# ++ you don't need to do this in iTerm2 - just hold down the option key (alt)
# ++ mouse support on
# <prefix>m
# ++ mouse support off
# <prefix>M


# -
# use my default bash shell istead of osx's
set-option -g default-shell $SHELL


# -
# bind <Ctrl-Space> as you new tmux prefix
# ++ unbind the old prefix (?)
unbind C-b
# ++ set the new prefix to <ctrl-space> (?)
set -g prefix C-Space
# ++ bind Space to send the prefix to tmux (?)
bind Space send-prefix


# -
# <Ctrl-Space><Space> takes you to copy mode
# ++ bind Space to take you to copy mode (?)
bind Space copy-mode
# ++ (make it work even if I don't release ctrl after the 1st space)
bind C-Space copy-mode


# -
# Set history limit (default is around 2000)
set-option -g history-limit 10000


# -
# fix copying and pasting from osx to tmux and vice versa
# (not needed in yosemite and later)
# ++ in bash (with homebrew installed):
# brew install reattach-to-user-namespace
# ++ in here:
#bind-key -Tcopy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# ++ (problem seems not fixed in El Capitan..)
# set-option -g default-command $SHELL


# -
# setup vi-like behavior in copy-mode
set -s copy-command $CMD_COPY_TO_CLIPBOARD
# ++ 'v' begins selection
bind-key -Tcopy-mode-vi v send-keys -X begin-selection
# ++ 'y' copies (to system clipboard)
bind-key -Tcopy-mode-vi y send-keys -X copy-pipe-and-cancel
# ++ copy using the mouse
bind-key -Tcopy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel
# ++ 'Enter' also copies like this
# ++ bind ']' to use pbpaste (i.e. <prefix>] will paste)
# bind ] run "pbpaste | tmux load-buffer - && tmux paste-buffer"
# ++ begin rectangle selection (like vi's C-v)
#    (press 'C-v' after you've already pressed 'v' to start visual selection)
bind-key -Tcopy-mode-vi 'C-v' send-keys -X rectangle-toggle
bind-key -Tcopy-mode-vi Escape send-keys -X cancel


# -
# zoom pane to full size (and back) using vi-bindings
# ++ remember: default binding is <leader>z
# ++ bind to <leader>|
# bind | resize-pane -Z
# ++ bind to <leader>_
# bind _ resize-pane -Z


# -
# quickly select a pane layout
# ++ horizontal split, all panes same width
bind t select-layout even-vertical
# ++ vertical split, all panes same width
bind e select-layout even-horizontal
# ++ vertical split, main pane left, others right, split, same height
bind r select-layout main-vertical
# ++ the main pane should take be 50% of the screen size (layouts: main-vertical, main-horizontal)
set-option -g main-pane-width 50%
# ++ tile the whole screen, each tile takes the same size
bind t select-layout tiled


# -
# seamlessly navigate between tmux and vim splits using ctrl-hjkl
# ++ install the vim plugin vim-tmux-navigator
# ++ configure the tmux side:
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | egrep -iq 'vim' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | egrep -iq 'vim' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | egrep -iq 'vim' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | egrep -iq 'vim' && tmux send-keys C-l) || tmux select-pane -R"
# >> previous (last) pane
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | egrep -iq 'vim' && tmux send-keys 'C-\\') || tmux select-pane -l"

# -
# clear screen using <prefix><Ctrl-l> or <prefix><l>
# (e.g. <Ctrl-Space><Ctrl-l> or <Ctrl-Space><l>)
# (because the original <Ctrl-l> is taken for the split navigation
bind C-l send-keys 'C-l'
bind l send-keys 'C-l'


# -
# map ; after <prefix> to :
# (have to escape ';' since tmux uses it as a command separator)
unbind-key \;
bind-key \; command-prompt


# -
# fast switch to tmux windows (already a shortcut, up to window 9)
# bind-key 1 select-window -t 1
# bind-key 2 select-window -t 2
# bind-key 3 select-window -t 3
# bind-key 4 select-window -t 4
# bind-key 5 select-window -t 5


# -
# change mappings for splitting windows (open in current path)
# ++ (-c lets me supply a path)
# ++ vertical split (i.e. the line splitting the windows is vertical)
bind s split-window -v -c "#{pane_current_path}"
# ++ vertical split (works if I don't let go of <ctrl>)
bind C-s split-window -v -c "#{pane_current_path}"
# ++ horizontal split (i.e. line splitting the windows is horizontal)
bind v split-window -h -c "#{pane_current_path}"
# ++ horizontal split (works if I don't let go of <ctrl>)
bind C-v split-window -h -c "#{pane_current_path}"


# -
# move tmux status bar to top
set-option -g status-position top


# -
# enable hjkl to move around
# (this also enables vi bindings in copy mode)
setw -g mode-keys vi


# -
# instantaneous ESC in vim (might need tmux server restart)
set -sg escape-time 0


# -
# supposedly makes the communication between vim and tmux smooth
# (pre v2.1?)
# set-window-option -g utf8 on


# -
# enable mouse support
# ++ enable mouse support in tmux:
#    (pre v2.1)
# set-option -g mouse-select-pane on
# set-option -g mouse-select-window on
# set -g mode-mouse on
# set -g mouse-resize-pane on
# set -g mouse-select-pane on
# set -g mouse-select-window on


# -
# enable mouse support
# ++ enable mouse support in tmux:
set -g mouse on


# -
# toggle mouse support off with <leader>M
# (pre v2.1)
# bind M \
#   set -g mode-mouse off \;\
#   set -g mouse-resize-pane off \;\
#   set -g mouse-select-pane off \;\
#   set -g mouse-select-window off \;\
#   display 'Mouse: OFF'


# -
# toggle mouse support off with <leader>M
bind M \
  set -g mouse off \;\
  display 'Mouse: OFF'


# -
# toggle mouse support on with <leader>m
# (pre v2.1)
# bind m \
#   set -g mode-mouse on \;\
#   set -g mouse-resize-pane on \;\
#   set -g mouse-select-pane on \;\
#   set -g mouse-select-window on \;\
#   display 'Mouse: ON'


# -
# toggle mouse support on with <leader>m
bind m \
  set -g mouse on \;\
  display 'Mouse: ON'


# -
# move window left/right
# simply press [ or ] after the prefix
# option -r means that the key can repeat within the configured repeat-time
bind-key -r [ "swap-window -t -1; select-window -t -1"
bind-key -r ] "swap-window -t +1; select-window -t +1"


# -
# allow to repeat the "previous/next window" shortcut without hitting the prefix again
bind-key -r p previous-window
bind-key -r n next-window


# -
# set the timeout for `bind-key -r ...`
# (enter multiple commands after pressing the prefix only once)
# default: 500
# set-option -g repeat-time 500

# -
# switch to previous/next window with normal OSX shortcuts
bind-key -n C-S-Tab previous-window
bind-key -n C-Tab next-window


# -
# make tmux work with 256 colors
# set-option -g default-terminal "screen-256color"
# set-option -g default-terminal "xterm-256color"
# set-option -ag terminal-overrides ",xterm-256color:Tc"
set-option -g default-terminal "tmux-256color"
set-option -ag terminal-overrides ",*-256color:Tc"


# -
# tmux solarized colorscheme
# (from github.com/altercation/solarized/tree/master/tmux)
# ++ default statusbar colors
set-option -g status-style bg=black,fg=yellow,default #base02 #yellow
# ++ default window title colors
set-window-option -g window-status-style bg=default,fg=brightblue #base0
# set-window-option -g window-status-style bg=default,fg=brightblue,dim #base0
# ++ active window title colors
set-window-option -g window-status-current-style bg=default,fg=brightred #orange
# set-window-option -g window-status-current bg=default,fg=brightred,bright #orange
# ++ pane border
set-option -g pane-border-style fg=black #base02
set-option -g pane-active-border-style fg=brightgreen #base01
# ++ message text
set-option -g message-style bg=black #base02
set-option -g message-style fg=brightred #orange
# ++ pane number display
set-option -g display-panes-active-colour blue #blue
set-option -g display-panes-colour brightred #orange
# ++ clock
set-window-option -g clock-mode-colour green #green


# -
# start counting windows and panes at 1, not 0
set-option -g base-index 1
set-window-option -g pane-base-index 1


# -
# sane scrolling (NOT!)
# This scrolls the whole screen up to previous screens.
# I prefer the default (scroll tmux pane).
#set -g terminal-overrides 'xterm*:smcup@:rmcup@'


# -
# make sure window numbers have no gaps
set-option -g renumber-windows on
